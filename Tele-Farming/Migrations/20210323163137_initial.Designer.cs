// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tele_Farming.Data;

namespace Tele_Farming.Migrations
{
    [DbContext(typeof(TeleFarmingContext))]
    [Migration("20210323163137_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Tele_Farming.Models.Admin", b =>
                {
                    b.Property<int>("admin_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("contact_number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("profile_picture_path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("admin_id");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("Tele_Farming.Models.Agent", b =>
                {
                    b.Property<int>("agent_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PasswordResetCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bkash_number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("contact_number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("profile_picture_path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("agent_id");

                    b.ToTable("Agent");
                });

            modelBuilder.Entity("Tele_Farming.Models.Combined_Read_Write_Posts", b =>
                {
                    b.Property<string>("ComplainedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FarmerDetailsfarmer_details_id")
                        .HasColumnType("int");

                    b.Property<string>("PostedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ViewType")
                        .HasColumnType("int");

                    b.Property<int?>("agent_id")
                        .HasColumnType("int");

                    b.Property<string>("am_pm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("day")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("farmer_id")
                        .HasColumnType("int");

                    b.Property<string>("hasMeeting")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("hour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("meeting_id")
                        .HasColumnType("int");

                    b.Property<string>("minute")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("month")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("post_id")
                        .HasColumnType("int");

                    b.Property<int?>("specialist_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("time")
                        .HasColumnType("datetime2");

                    b.Property<string>("year")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("FarmerDetailsfarmer_details_id");

                    b.HasIndex("agent_id");

                    b.HasIndex("farmer_id");

                    b.HasIndex("meeting_id");

                    b.HasIndex("post_id");

                    b.HasIndex("specialist_id");

                    b.ToTable("Combined_Read_Write_Posts");
                });

            modelBuilder.Entity("Tele_Farming.Models.Complain", b =>
                {
                    b.Property<int>("complain_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("is_resolved")
                        .HasColumnType("int");

                    b.Property<DateTime>("time")
                        .HasColumnType("datetime2");

                    b.HasKey("complain_id");

                    b.ToTable("Complain");
                });

            modelBuilder.Entity("Tele_Farming.Models.Farmer", b =>
                {
                    b.Property<int>("farmer_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PasswordResetCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bkash_number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("contact_number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("profile_picture_path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("farmer_id");

                    b.ToTable("Farmer");
                });

            modelBuilder.Entity("Tele_Farming.Models.FarmerDetails", b =>
                {
                    b.Property<int>("farmer_details_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("contact_number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("post_id")
                        .HasColumnType("int");

                    b.HasKey("farmer_details_id");

                    b.HasIndex("post_id")
                        .IsUnique()
                        .HasFilter("[post_id] IS NOT NULL");

                    b.ToTable("FarmerDetails");
                });

            modelBuilder.Entity("Tele_Farming.Models.Meeting", b =>
                {
                    b.Property<int>("meeting_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("meeting_link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("meeting_status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("meeting_time")
                        .HasColumnType("datetime2");

                    b.Property<int>("post_id")
                        .HasColumnType("int");

                    b.Property<string>("short_message")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("specialist_id")
                        .HasColumnType("int");

                    b.HasKey("meeting_id");

                    b.HasIndex("post_id")
                        .IsUnique();

                    b.HasIndex("specialist_id");

                    b.ToTable("Meeting");
                });

            modelBuilder.Entity("Tele_Farming.Models.MeetingFailure", b =>
                {
                    b.Property<int>("meeting_failure_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("complain_id")
                        .HasColumnType("int");

                    b.Property<int>("meeting_id")
                        .HasColumnType("int");

                    b.HasKey("meeting_failure_id");

                    b.HasIndex("complain_id")
                        .IsUnique();

                    b.HasIndex("meeting_id")
                        .IsUnique();

                    b.ToTable("MeetingFailures");
                });

            modelBuilder.Entity("Tele_Farming.Models.Payment", b =>
                {
                    b.Property<int>("payment_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("amount")
                        .HasColumnType("float");

                    b.Property<int>("meeting_id")
                        .HasColumnType("int");

                    b.Property<int>("payment_status")
                        .HasColumnType("int");

                    b.HasKey("payment_id");

                    b.HasIndex("meeting_id")
                        .IsUnique();

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("Tele_Farming.Models.Post", b =>
                {
                    b.Property<int>("post_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("agent_id")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("farmer_id")
                        .HasColumnType("int");

                    b.Property<string>("is_accepted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("post_status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("post_time")
                        .HasColumnType("datetime2");

                    b.Property<string>("title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("post_id");

                    b.HasIndex("agent_id");

                    b.HasIndex("farmer_id");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("Tele_Farming.Models.Post_Images", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("image_path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("post_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("post_id");

                    b.ToTable("Post_Images");
                });

            modelBuilder.Entity("Tele_Farming.Models.Post_Time", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("post_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("time")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("post_id");

                    b.ToTable("Post_Time");
                });

            modelBuilder.Entity("Tele_Farming.Models.Review", b =>
                {
                    b.Property<int>("review_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("meeting_id")
                        .HasColumnType("int");

                    b.Property<double>("rating")
                        .HasColumnType("float");

                    b.HasKey("review_id");

                    b.HasIndex("meeting_id")
                        .IsUnique();

                    b.ToTable("Review");
                });

            modelBuilder.Entity("Tele_Farming.Models.Specialist", b =>
                {
                    b.Property<int>("specialist_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordResetCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bkash_number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("certificate_file_path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("contact_number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("is_approved")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nid_file_path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("profile_picture_path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("specialist_id");

                    b.ToTable("Specialist");
                });

            modelBuilder.Entity("Tele_Farming.Models.Combined_Read_Write_Posts", b =>
                {
                    b.HasOne("Tele_Farming.Models.FarmerDetails", "FarmerDetails")
                        .WithMany()
                        .HasForeignKey("FarmerDetailsfarmer_details_id");

                    b.HasOne("Tele_Farming.Models.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("agent_id");

                    b.HasOne("Tele_Farming.Models.Farmer", "Farmer")
                        .WithMany()
                        .HasForeignKey("farmer_id");

                    b.HasOne("Tele_Farming.Models.Meeting", "Meeting")
                        .WithMany()
                        .HasForeignKey("meeting_id");

                    b.HasOne("Tele_Farming.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("post_id");

                    b.HasOne("Tele_Farming.Models.Specialist", "Specialist")
                        .WithMany()
                        .HasForeignKey("specialist_id");

                    b.Navigation("Agent");

                    b.Navigation("Farmer");

                    b.Navigation("FarmerDetails");

                    b.Navigation("Meeting");

                    b.Navigation("Post");

                    b.Navigation("Specialist");
                });

            modelBuilder.Entity("Tele_Farming.Models.FarmerDetails", b =>
                {
                    b.HasOne("Tele_Farming.Models.Post", "Post")
                        .WithOne("FarmerDetails")
                        .HasForeignKey("Tele_Farming.Models.FarmerDetails", "post_id");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Tele_Farming.Models.Meeting", b =>
                {
                    b.HasOne("Tele_Farming.Models.Post", "Post")
                        .WithOne("Meeting")
                        .HasForeignKey("Tele_Farming.Models.Meeting", "post_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tele_Farming.Models.Specialist", "Specialist")
                        .WithMany("Meeting")
                        .HasForeignKey("specialist_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Specialist");
                });

            modelBuilder.Entity("Tele_Farming.Models.MeetingFailure", b =>
                {
                    b.HasOne("Tele_Farming.Models.Complain", "Complain")
                        .WithOne("MeetingFailure")
                        .HasForeignKey("Tele_Farming.Models.MeetingFailure", "complain_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tele_Farming.Models.Meeting", "Meeting")
                        .WithOne("MeetingFailure")
                        .HasForeignKey("Tele_Farming.Models.MeetingFailure", "meeting_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Complain");

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("Tele_Farming.Models.Payment", b =>
                {
                    b.HasOne("Tele_Farming.Models.Meeting", "Meeting")
                        .WithOne("Payment")
                        .HasForeignKey("Tele_Farming.Models.Payment", "meeting_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("Tele_Farming.Models.Post", b =>
                {
                    b.HasOne("Tele_Farming.Models.Agent", "Agent")
                        .WithMany("Post")
                        .HasForeignKey("agent_id");

                    b.HasOne("Tele_Farming.Models.Farmer", "Farmer")
                        .WithMany("Post")
                        .HasForeignKey("farmer_id");

                    b.Navigation("Agent");

                    b.Navigation("Farmer");
                });

            modelBuilder.Entity("Tele_Farming.Models.Post_Images", b =>
                {
                    b.HasOne("Tele_Farming.Models.Post", "Post")
                        .WithMany("Post_Images")
                        .HasForeignKey("post_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Tele_Farming.Models.Post_Time", b =>
                {
                    b.HasOne("Tele_Farming.Models.Post", "Post")
                        .WithMany("Post_Time")
                        .HasForeignKey("post_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Tele_Farming.Models.Review", b =>
                {
                    b.HasOne("Tele_Farming.Models.Meeting", "Meeting")
                        .WithOne("Review")
                        .HasForeignKey("Tele_Farming.Models.Review", "meeting_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("Tele_Farming.Models.Agent", b =>
                {
                    b.Navigation("Post");
                });

            modelBuilder.Entity("Tele_Farming.Models.Complain", b =>
                {
                    b.Navigation("MeetingFailure");
                });

            modelBuilder.Entity("Tele_Farming.Models.Farmer", b =>
                {
                    b.Navigation("Post");
                });

            modelBuilder.Entity("Tele_Farming.Models.Meeting", b =>
                {
                    b.Navigation("MeetingFailure");

                    b.Navigation("Payment");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("Tele_Farming.Models.Post", b =>
                {
                    b.Navigation("FarmerDetails");

                    b.Navigation("Meeting");

                    b.Navigation("Post_Images");

                    b.Navigation("Post_Time");
                });

            modelBuilder.Entity("Tele_Farming.Models.Specialist", b =>
                {
                    b.Navigation("Meeting");
                });
#pragma warning restore 612, 618
        }
    }
}
